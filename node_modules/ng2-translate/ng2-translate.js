import { NgModule } from "@angular/core";
import { Http, HttpModule } from "@angular/http";
import { TranslatePipe } from "./src/translate.pipe";
import { TranslateService, TranslateLoader, TranslateStaticLoader } from "./src/translate.service";
export * from "./src/translate.pipe";
export * from "./src/translate.service";
export * from "./src/translate.parser";
export function translateLoaderFactory(http) {
    return new TranslateStaticLoader(http);
}
export var TranslateModule = (function () {
    function TranslateModule() {
    }
    TranslateModule.forRoot = function (providedLoader) {
        if (providedLoader === void 0) { providedLoader = {
            provide: TranslateLoader,
            useFactory: translateLoaderFactory,
            deps: [Http]
        }; }
        return {
            ngModule: TranslateModule,
            providers: [providedLoader, TranslateService]
        };
    };
    TranslateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [HttpModule],
                    declarations: [
                        TranslatePipe
                    ],
                    exports: [
                        HttpModule,
                        TranslatePipe
                    ]
                },] },
    ];
    /** @nocollapse */
    TranslateModule.ctorParameters = [];
    return TranslateModule;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXRyYW5zbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nMi10cmFuc2xhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBQyxRQUFRLEVBQXNCLE1BQU0sZUFBZTtPQUNwRCxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlO09BQ3ZDLEVBQUMsYUFBYSxFQUFDLE1BQU0sc0JBQXNCO09BQzNDLEVBQUMsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFDLE1BQU0seUJBQXlCO0FBRWhHLGNBQWMsc0JBQXNCLENBQUM7QUFDckMsY0FBYyx5QkFBeUIsQ0FBQztBQUN4QyxjQUFjLHdCQUF3QixDQUFDO0FBRXZDLHVDQUF1QyxJQUFVO0lBQzdDLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFHRDtJQUFBO0lBMEJBLENBQUM7SUF6QlUsdUJBQU8sR0FBZCxVQUFlLGNBSWQ7UUFKYyw4QkFJZCxHQUpjO1lBQ1gsT0FBTyxFQUFFLGVBQWU7WUFDeEIsVUFBVSxFQUFFLHNCQUFzQjtZQUNsQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUM7U0FDZjtRQUNHLE1BQU0sQ0FBQztZQUNILFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQztTQUNoRCxDQUFDO0lBQ04sQ0FBQztJQUNFLDBCQUFVLEdBQTBCO1FBQzNDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDckIsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDO29CQUNyQixZQUFZLEVBQUU7d0JBQ1YsYUFBYTtxQkFDaEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLFVBQVU7d0JBQ1YsYUFBYTtxQkFDaEI7aUJBQ0osRUFBRyxFQUFFO0tBQ0wsQ0FBQztJQUNGLGtCQUFrQjtJQUNYLDhCQUFjLEdBQTZELEVBQ2pGLENBQUM7SUFDRixzQkFBQztBQUFELENBQUMsQUExQkQsSUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtIdHRwLCBIdHRwTW9kdWxlfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHtUcmFuc2xhdGVQaXBlfSBmcm9tIFwiLi9zcmMvdHJhbnNsYXRlLnBpcGVcIjtcbmltcG9ydCB7VHJhbnNsYXRlU2VydmljZSwgVHJhbnNsYXRlTG9hZGVyLCBUcmFuc2xhdGVTdGF0aWNMb2FkZXJ9IGZyb20gXCIuL3NyYy90cmFuc2xhdGUuc2VydmljZVwiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9zcmMvdHJhbnNsYXRlLnBpcGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NyYy90cmFuc2xhdGUuc2VydmljZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3JjL3RyYW5zbGF0ZS5wYXJzZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZUxvYWRlckZhY3RvcnkoaHR0cDogSHR0cCkge1xuICAgIHJldHVybiBuZXcgVHJhbnNsYXRlU3RhdGljTG9hZGVyKGh0dHApO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KHByb3ZpZGVkTG9hZGVyOiBhbnkgPSB7XG4gICAgICAgIHByb3ZpZGU6IFRyYW5zbGF0ZUxvYWRlcixcbiAgICAgICAgdXNlRmFjdG9yeTogdHJhbnNsYXRlTG9hZGVyRmFjdG9yeSxcbiAgICAgICAgZGVwczogW0h0dHBdXG4gICAgfSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFRyYW5zbGF0ZU1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW3Byb3ZpZGVkTG9hZGVyLCBUcmFuc2xhdGVTZXJ2aWNlXVxuICAgICAgICB9O1xuICAgIH1cbnN0YXRpYyBkZWNvcmF0b3JzOiBEZWNvcmF0b3JJbnZvY2F0aW9uW10gPSBbXG57IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgIGltcG9ydHM6IFtIdHRwTW9kdWxlXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgVHJhbnNsYXRlUGlwZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBIdHRwTW9kdWxlLCAvLyB0b2RvIHJlbW92ZSB0aGlzIHdoZW4gcmVtb3ZpbmcgdGhlIGxvYWRlciBmcm9tIGNvcmVcbiAgICAgICAgVHJhbnNsYXRlUGlwZVxuICAgIF1cbn0sIF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbnN0YXRpYyBjdG9yUGFyYW1ldGVyczogKHt0eXBlOiBhbnksIGRlY29yYXRvcnM/OiBEZWNvcmF0b3JJbnZvY2F0aW9uW119fG51bGwpW10gPSBbXG5dO1xufVxuXG5pbnRlcmZhY2UgRGVjb3JhdG9ySW52b2NhdGlvbiB7XG4gIHR5cGU6IEZ1bmN0aW9uO1xuICBhcmdzPzogYW55W107XG59XG4iXX0=